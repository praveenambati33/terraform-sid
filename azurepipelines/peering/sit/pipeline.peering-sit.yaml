name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

variables:
  - template: variables.yaml

trigger: none

# Don't run against PRs
pr: none

stages :
  - stage: validate
    displayName: Validate for ${{ variables.Application }} - ${{ variables.Environment }} environment
    jobs:
    - job: validate
      continueOnError: false
      steps:
      - task: TerraformInstaller@0
        displayName: 'install'
        inputs:
          terraformVersion: ${{ variables.terraformVersion }}
      - task: TerraformTaskV1@0
        displayName: 'validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'
          
  - stage: plan
    displayName: Plan for ${{ variables.Application }} - ${{ variables.Environment }} environment
    dependsOn: [validate]
    condition: succeeded('validate')
    jobs:
      - job: terraform_plan
        steps:
              - checkout: self
              - task: TerraformInstaller@0
                displayName: 'install'
                inputs:
                  terraformVersion: ${{ variables.terraformVersion }}
              - task: TerraformTaskV2@2
                displayName: 'init'
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  backendServiceArm: ${{ variables.backendServiceArm }}
                  backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
                  backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
                  backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
                  backendAzureRmKey: '${{ variables.Application }}-${{ variables.Environment }}.tfstate'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/${{ variables.Application }}'
              - task: TerraformTaskV1@0
                displayName: 'plan'
                inputs:
                  provider: 'azurerm'
                  command: 'plan'
                  commandOptions: '-input=false -var-file="./${{ variables.Environment }}/${{ variables.Application }}-${{ variables.Environment }}.tfvars"'
                  environmentServiceNameAzureRM: ${{ variables.environmentServiceNameAzureRM }}
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/${{ variables.Application }}'

  - stage: apply
    displayName: Apply for ${{ variables.Application }} - ${{ variables.Environment }} environment
    dependsOn: [plan]
    condition: succeeded('plan')
    jobs:
      - job: waitForValidation
        displayName: Please validate terraform plan and approve the request for ${{ variables.Environment }} environment
        pool: server
        timeoutInMinutes: 300 # job times out in 5 hours
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 180  # job times out in 3 hours
            inputs:
              notifyUsers: 'Praveen.Ambati@point32health.org'
              instructions: 'Terraform apply stage will provision the resources which might impact the infrastructure, as a approver please review `terraform plan` and compare your real infrastructure against your configuration (terrraform code)'
              onTimeout: resume
      - job: terraform_apply
        dependsOn: waitForValidation
        steps:
              - checkout: self
              - task: TerraformInstaller@0
                displayName: 'install'
                inputs:
                  terraformVersion: ${{ variables.terraformVersion }}
              - task: TerraformTaskV2@2 #TerraformTaskV1@0
                displayName: 'init'
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  backendServiceArm: ${{ variables.backendServiceArm }}
                  backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
                  backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
                  backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
                  backendAzureRmKey: '${{ variables.Application }}-${{ variables.Environment }}.tfstate'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/${{ variables.Application }}'
              - task: TerraformTaskV1@0
                displayName: 'apply'
                inputs:
                  provider: 'azurerm'
                  command: 'apply'
                  commandOptions: '-input=false -var-file="./${{ variables.Environment }}/${{ variables.Application }}-${{ variables.Environment }}.tfvars"'
                  environmentServiceNameAzureRM: ${{ variables.environmentServiceNameAzureRM }}
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/${{ variables.Application }}'
  - stage: destroy
    displayName: Destroy for ${{ variables.Application }} - ${{ variables.Environment }} environment
    jobs:
      - job: waitForValidation
        displayName: Please validate terraform plan and approve the request for ${{ variables.Environment }} environment
        pool: server
        timeoutInMinutes: 300 # job times out in 5 hours
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 180  # job times out in 3 hours
            inputs:
              notifyUsers: 'Praveen.Ambati@point32health.org'
              instructions: 'Terraform apply stage will provision the resources which might impact the infrastructure, as a approver please review `terraform plan` and compare your real infrastructure against your configuration (terrraform code)'
              onTimeout: resume
      - job: terraform_destroy
        steps:
              - checkout: self
              - task: TerraformInstaller@0
                displayName: 'install'
                inputs:
                  terraformVersion: ${{ variables.terraformVersion }}
              - task: TerraformTaskV2@2  #TerraformTaskV1@0
                displayName: 'init'
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  backendServiceArm: ${{ variables.backendServiceArm }}
                  backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
                  backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
                  backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
                  backendAzureRmKey: '${{ variables.Application }}-${{ variables.Environment }}.tfstate'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/${{ variables.Application }}'
              - task: TerraformTaskV1@0
                displayName: 'destroy'
                inputs:
                  provider: 'azurerm'
                  command: 'destroy'
                  commandOptions: '-input=false -var-file="./${{ variables.Environment }}/${{ variables.Application }}-${{ variables.Environment }}.tfvars"'
                  environmentServiceNameAzureRM: ${{ variables.environmentServiceNameAzureRM }}
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/${{ variables.Application }}'